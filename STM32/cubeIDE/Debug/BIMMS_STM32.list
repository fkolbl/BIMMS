
BIMMS_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000292c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002a38  08002a38  00012a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a58  08002a58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a58  08002a58  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a58  08002a58  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a5c  08002a5c  00012a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002a60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  08002a6c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  08002a6c  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a32c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f9  00000000  00000000  0002a361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002bb60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  0002c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167b6  00000000  00000000  0002d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b493  00000000  00000000  0004393e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d47  00000000  00000000  0004edd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2b18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fcc  00000000  00000000  000d2b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002a20 	.word	0x08002a20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002a20 	.word	0x08002a20

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fd8f 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f8a3 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f969 	bl	8000430 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015e:	f000 f8e5 	bl	800032c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000162:	f000 f919 	bl	8000398 <MX_TIM2_Init>




  //Init Global Variables
  for (short unsigned int i = 0; i<4; i++)
 8000166:	2300      	movs	r3, #0
 8000168:	80fb      	strh	r3, [r7, #6]
 800016a:	e00a      	b.n	8000182 <main+0x36>
      {
         rxBuff[i]=0;
 800016c:	88fb      	ldrh	r3, [r7, #6]
 800016e:	4a3f      	ldr	r2, [pc, #252]	; (800026c <main+0x120>)
 8000170:	2100      	movs	r1, #0
 8000172:	54d1      	strb	r1, [r2, r3]
         txBuff[i]=0;
 8000174:	88fb      	ldrh	r3, [r7, #6]
 8000176:	4a3e      	ldr	r2, [pc, #248]	; (8000270 <main+0x124>)
 8000178:	2100      	movs	r1, #0
 800017a:	54d1      	strb	r1, [r2, r3]
  for (short unsigned int i = 0; i<4; i++)
 800017c:	88fb      	ldrh	r3, [r7, #6]
 800017e:	3301      	adds	r3, #1
 8000180:	80fb      	strh	r3, [r7, #6]
 8000182:	88fb      	ldrh	r3, [r7, #6]
 8000184:	2b03      	cmp	r3, #3
 8000186:	d9f1      	bls.n	800016c <main+0x20>
      }

  data_from_AD2 = 0;
 8000188:	4b3a      	ldr	r3, [pc, #232]	; (8000274 <main+0x128>)
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
  new_32bitsSPI = 0;
 800018e:	4b3a      	ldr	r3, [pc, #232]	; (8000278 <main+0x12c>)
 8000190:	2200      	movs	r2, #0
 8000192:	801a      	strh	r2, [r3, #0]


   cnt_fast = 0;
 8000194:	4b39      	ldr	r3, [pc, #228]	; (800027c <main+0x130>)
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
   cnt_slow = 0;
 800019a:	4b39      	ldr	r3, [pc, #228]	; (8000280 <main+0x134>)
 800019c:	2200      	movs	r2, #0
 800019e:	601a      	str	r2, [r3, #0]
   tick_slow = 0;
 80001a0:	4b38      	ldr	r3, [pc, #224]	; (8000284 <main+0x138>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	701a      	strb	r2, [r3, #0]
   tick_fast = 0;
 80001a6:	4b38      	ldr	r3, [pc, #224]	; (8000288 <main+0x13c>)
 80001a8:	2200      	movs	r2, #0
 80001aa:	701a      	strb	r2, [r3, #0]
   div_cnt_fast = 10;
 80001ac:	4b37      	ldr	r3, [pc, #220]	; (800028c <main+0x140>)
 80001ae:	220a      	movs	r2, #10
 80001b0:	601a      	str	r2, [r3, #0]
   div_cnt_slow = 80;
 80001b2:	4b37      	ldr	r3, [pc, #220]	; (8000290 <main+0x144>)
 80001b4:	2250      	movs	r2, #80	; 0x50
 80001b6:	601a      	str	r2, [r3, #0]

   HAL_GPIO_WritePin(statusLED_GPIO_Port, statusLED_Pin,0);
 80001b8:	2200      	movs	r2, #0
 80001ba:	2102      	movs	r1, #2
 80001bc:	4835      	ldr	r0, [pc, #212]	; (8000294 <main+0x148>)
 80001be:	f001 f8f7 	bl	80013b0 <HAL_GPIO_WritePin>
   HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin,0);
 80001c2:	2200      	movs	r2, #0
 80001c4:	2101      	movs	r1, #1
 80001c6:	4833      	ldr	r0, [pc, #204]	; (8000294 <main+0x148>)
 80001c8:	f001 f8f2 	bl	80013b0 <HAL_GPIO_WritePin>

  updateRelay(Relay_Default);
 80001cc:	2000      	movs	r0, #0
 80001ce:	f000 fa25 	bl	800061c <updateRelay>

  //Init state
  state = off_state ;
 80001d2:	4b31      	ldr	r3, [pc, #196]	; (8000298 <main+0x14c>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	801a      	strh	r2, [r3, #0]
  InitOffState();
 80001d8:	f000 fbf4 	bl	80009c4 <InitOffState>

  HAL_TIM_Base_Start_IT(&htim2);
 80001dc:	482f      	ldr	r0, [pc, #188]	; (800029c <main+0x150>)
 80001de:	f002 f85f 	bl	80022a0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      if (new_32bitsSPI)
 80001e2:	4b25      	ldr	r3, [pc, #148]	; (8000278 <main+0x12c>)
 80001e4:	881b      	ldrh	r3, [r3, #0]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d007      	beq.n	80001fa <main+0xae>
      {
          decode_data(data_from_AD2);
 80001ea:	4b22      	ldr	r3, [pc, #136]	; (8000274 <main+0x128>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 f9b0 	bl	8000554 <decode_data>
          new_32bitsSPI = 0;
 80001f4:	4b20      	ldr	r3, [pc, #128]	; (8000278 <main+0x12c>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	801a      	strh	r2, [r3, #0]
      }
      switch (state)
 80001fa:	4b27      	ldr	r3, [pc, #156]	; (8000298 <main+0x14c>)
 80001fc:	881b      	ldrh	r3, [r3, #0]
 80001fe:	2b03      	cmp	r3, #3
 8000200:	d8ef      	bhi.n	80001e2 <main+0x96>
 8000202:	a201      	add	r2, pc, #4	; (adr r2, 8000208 <main+0xbc>)
 8000204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000208:	08000219 	.word	0x08000219
 800020c:	080001e3 	.word	0x080001e3
 8000210:	08000231 	.word	0x08000231
 8000214:	08000249 	.word	0x08000249
      {
          case off_state:
        	  if (tick_slow)
 8000218:	4b1a      	ldr	r3, [pc, #104]	; (8000284 <main+0x138>)
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d01f      	beq.n	8000260 <main+0x114>
        	  {
        		  tick_slow = 0;
 8000220:	4b18      	ldr	r3, [pc, #96]	; (8000284 <main+0x138>)
 8000222:	2200      	movs	r2, #0
 8000224:	701a      	strb	r2, [r3, #0]
        		  HAL_GPIO_TogglePin(statusLED_GPIO_Port, statusLED_Pin);
 8000226:	2102      	movs	r1, #2
 8000228:	481a      	ldr	r0, [pc, #104]	; (8000294 <main+0x148>)
 800022a:	f001 f8d9 	bl	80013e0 <HAL_GPIO_TogglePin>
        	  }
        	  // Do Something
              break;
 800022e:	e017      	b.n	8000260 <main+0x114>
          case idle_state:
              // Do Something
              break;
          case locked_state:
        	  if (tick_fast)
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <main+0x13c>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	2b00      	cmp	r3, #0
 8000236:	d015      	beq.n	8000264 <main+0x118>
        	  {
        		  tick_fast = 0;
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <main+0x13c>)
 800023a:	2200      	movs	r2, #0
 800023c:	701a      	strb	r2, [r3, #0]
        		  HAL_GPIO_TogglePin(statusLED_GPIO_Port, statusLED_Pin);
 800023e:	2102      	movs	r1, #2
 8000240:	4814      	ldr	r0, [pc, #80]	; (8000294 <main+0x148>)
 8000242:	f001 f8cd 	bl	80013e0 <HAL_GPIO_TogglePin>
        	  }
              // Do Something
              break;
 8000246:	e00d      	b.n	8000264 <main+0x118>
          case error_state:
        	  if (tick_fast)
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <main+0x13c>)
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d00b      	beq.n	8000268 <main+0x11c>
        	  {
        		  tick_fast = 0;
 8000250:	4b0d      	ldr	r3, [pc, #52]	; (8000288 <main+0x13c>)
 8000252:	2200      	movs	r2, #0
 8000254:	701a      	strb	r2, [r3, #0]
        		  HAL_GPIO_TogglePin(errorLED_GPIO_Port, errorLED_Pin);
 8000256:	2101      	movs	r1, #1
 8000258:	480e      	ldr	r0, [pc, #56]	; (8000294 <main+0x148>)
 800025a:	f001 f8c1 	bl	80013e0 <HAL_GPIO_TogglePin>
        	  }
              // Do Something
              break;
 800025e:	e003      	b.n	8000268 <main+0x11c>
              break;
 8000260:	bf00      	nop
 8000262:	e7be      	b.n	80001e2 <main+0x96>
              break;
 8000264:	bf00      	nop
 8000266:	e7bc      	b.n	80001e2 <main+0x96>
              break;
 8000268:	bf00      	nop
      if (new_32bitsSPI)
 800026a:	e7ba      	b.n	80001e2 <main+0x96>
 800026c:	2000004c 	.word	0x2000004c
 8000270:	2000003c 	.word	0x2000003c
 8000274:	20000030 	.word	0x20000030
 8000278:	20000044 	.word	0x20000044
 800027c:	20000040 	.word	0x20000040
 8000280:	20000048 	.word	0x20000048
 8000284:	20000050 	.word	0x20000050
 8000288:	200000b0 	.word	0x200000b0
 800028c:	20000034 	.word	0x20000034
 8000290:	200000ac 	.word	0x200000ac
 8000294:	40011000 	.word	0x40011000
 8000298:	20000038 	.word	0x20000038
 800029c:	200000b4 	.word	0x200000b4

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b090      	sub	sp, #64	; 0x40
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2228      	movs	r2, #40	; 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 fbae 	bl	8002a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002c2:	2301      	movs	r3, #1
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80002cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	2301      	movs	r3, #1
 80002d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0318 	add.w	r3, r7, #24
 80002ea:	4618      	mov	r0, r3
 80002ec:	f001 f8aa 	bl	8001444 <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80002f6:	f000 fb95 	bl	8000a24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fe:	2302      	movs	r3, #2
 8000300:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800030a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030c:	2300      	movs	r3, #0
 800030e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000310:	1d3b      	adds	r3, r7, #4
 8000312:	2102      	movs	r1, #2
 8000314:	4618      	mov	r0, r3
 8000316:	f001 fb15 	bl	8001944 <HAL_RCC_ClockConfig>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000320:	f000 fb80 	bl	8000a24 <Error_Handler>
  }
}
 8000324:	bf00      	nop
 8000326:	3740      	adds	r7, #64	; 0x40
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}

0800032c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000330:	4b17      	ldr	r3, [pc, #92]	; (8000390 <MX_SPI1_Init+0x64>)
 8000332:	4a18      	ldr	r2, [pc, #96]	; (8000394 <MX_SPI1_Init+0x68>)
 8000334:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000336:	4b16      	ldr	r3, [pc, #88]	; (8000390 <MX_SPI1_Init+0x64>)
 8000338:	2200      	movs	r2, #0
 800033a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800033c:	4b14      	ldr	r3, [pc, #80]	; (8000390 <MX_SPI1_Init+0x64>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000342:	4b13      	ldr	r3, [pc, #76]	; (8000390 <MX_SPI1_Init+0x64>)
 8000344:	2200      	movs	r2, #0
 8000346:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <MX_SPI1_Init+0x64>)
 800034a:	2202      	movs	r2, #2
 800034c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <MX_SPI1_Init+0x64>)
 8000350:	2201      	movs	r2, #1
 8000352:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <MX_SPI1_Init+0x64>)
 8000356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800035a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800035c:	4b0c      	ldr	r3, [pc, #48]	; (8000390 <MX_SPI1_Init+0x64>)
 800035e:	2228      	movs	r2, #40	; 0x28
 8000360:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <MX_SPI1_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <MX_SPI1_Init+0x64>)
 800036a:	2200      	movs	r2, #0
 800036c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <MX_SPI1_Init+0x64>)
 8000370:	2200      	movs	r2, #0
 8000372:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000374:	4b06      	ldr	r3, [pc, #24]	; (8000390 <MX_SPI1_Init+0x64>)
 8000376:	220a      	movs	r2, #10
 8000378:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800037a:	4805      	ldr	r0, [pc, #20]	; (8000390 <MX_SPI1_Init+0x64>)
 800037c:	f001 fc4c 	bl	8001c18 <HAL_SPI_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8000386:	f000 fb4d 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000054 	.word	0x20000054
 8000394:	40013000 	.word	0x40013000

08000398 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
 80003aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003ac:	463b      	mov	r3, r7
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <MX_TIM2_Init+0x94>)
 80003b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <MX_TIM2_Init+0x94>)
 80003be:	2264      	movs	r2, #100	; 0x64
 80003c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c2:	4b1a      	ldr	r3, [pc, #104]	; (800042c <MX_TIM2_Init+0x94>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 7200;
 80003c8:	4b18      	ldr	r3, [pc, #96]	; (800042c <MX_TIM2_Init+0x94>)
 80003ca:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 80003ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <MX_TIM2_Init+0x94>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003d6:	4b15      	ldr	r3, [pc, #84]	; (800042c <MX_TIM2_Init+0x94>)
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003dc:	4813      	ldr	r0, [pc, #76]	; (800042c <MX_TIM2_Init+0x94>)
 80003de:	f001 ff0f 	bl	8002200 <HAL_TIM_Base_Init>
 80003e2:	4603      	mov	r3, r0
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d001      	beq.n	80003ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80003e8:	f000 fb1c 	bl	8000a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	4619      	mov	r1, r3
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <MX_TIM2_Init+0x94>)
 80003fa:	f002 f8a5 	bl	8002548 <HAL_TIM_ConfigClockSource>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000404:	f000 fb0e 	bl	8000a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000408:	2300      	movs	r3, #0
 800040a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800040c:	2300      	movs	r3, #0
 800040e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000410:	463b      	mov	r3, r7
 8000412:	4619      	mov	r1, r3
 8000414:	4805      	ldr	r0, [pc, #20]	; (800042c <MX_TIM2_Init+0x94>)
 8000416:	f002 fa6d 	bl	80028f4 <HAL_TIMEx_MasterConfigSynchronization>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000420:	f000 fb00 	bl	8000a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000424:	bf00      	nop
 8000426:	3718      	adds	r7, #24
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	200000b4 	.word	0x200000b4

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	f107 0310 	add.w	r3, r7, #16
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
 8000442:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000444:	4b3e      	ldr	r3, [pc, #248]	; (8000540 <MX_GPIO_Init+0x110>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4a3d      	ldr	r2, [pc, #244]	; (8000540 <MX_GPIO_Init+0x110>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6193      	str	r3, [r2, #24]
 8000450:	4b3b      	ldr	r3, [pc, #236]	; (8000540 <MX_GPIO_Init+0x110>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	f003 0310 	and.w	r3, r3, #16
 8000458:	60fb      	str	r3, [r7, #12]
 800045a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800045c:	4b38      	ldr	r3, [pc, #224]	; (8000540 <MX_GPIO_Init+0x110>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	4a37      	ldr	r2, [pc, #220]	; (8000540 <MX_GPIO_Init+0x110>)
 8000462:	f043 0320 	orr.w	r3, r3, #32
 8000466:	6193      	str	r3, [r2, #24]
 8000468:	4b35      	ldr	r3, [pc, #212]	; (8000540 <MX_GPIO_Init+0x110>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	f003 0320 	and.w	r3, r3, #32
 8000470:	60bb      	str	r3, [r7, #8]
 8000472:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000474:	4b32      	ldr	r3, [pc, #200]	; (8000540 <MX_GPIO_Init+0x110>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a31      	ldr	r2, [pc, #196]	; (8000540 <MX_GPIO_Init+0x110>)
 800047a:	f043 0304 	orr.w	r3, r3, #4
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b2f      	ldr	r3, [pc, #188]	; (8000540 <MX_GPIO_Init+0x110>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0304 	and.w	r3, r3, #4
 8000488:	607b      	str	r3, [r7, #4]
 800048a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048c:	4b2c      	ldr	r3, [pc, #176]	; (8000540 <MX_GPIO_Init+0x110>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a2b      	ldr	r2, [pc, #172]	; (8000540 <MX_GPIO_Init+0x110>)
 8000492:	f043 0308 	orr.w	r3, r3, #8
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b29      	ldr	r3, [pc, #164]	; (8000540 <MX_GPIO_Init+0x110>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0308 	and.w	r3, r3, #8
 80004a0:	603b      	str	r3, [r7, #0]
 80004a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, relay21_Pin|relay22_Pin|relay23_Pin|errorLED_Pin
 80004a4:	2200      	movs	r2, #0
 80004a6:	f64f 6103 	movw	r1, #65027	; 0xfe03
 80004aa:	4826      	ldr	r0, [pc, #152]	; (8000544 <MX_GPIO_Init+0x114>)
 80004ac:	f000 ff80 	bl	80013b0 <HAL_GPIO_WritePin>
                          |statusLED_Pin|relay17_Pin|relay18_Pin|relay19_Pin
                          |relay20_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, relay1_Pin|relay2_Pin|relay3_Pin|relay11_Pin
 80004b0:	2200      	movs	r2, #0
 80004b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004b6:	4824      	ldr	r0, [pc, #144]	; (8000548 <MX_GPIO_Init+0x118>)
 80004b8:	f000 ff7a 	bl	80013b0 <HAL_GPIO_WritePin>
                          |relay7_Pin|relay8_Pin|relay9_Pin|relay10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : relay21_Pin relay22_Pin relay23_Pin errorLED_Pin
                           statusLED_Pin relay17_Pin relay18_Pin relay19_Pin
                           relay20_Pin */
  GPIO_InitStruct.Pin = relay21_Pin|relay22_Pin|relay23_Pin|errorLED_Pin
 80004bc:	f64f 6303 	movw	r3, #65027	; 0xfe03
 80004c0:	613b      	str	r3, [r7, #16]
                          |statusLED_Pin|relay17_Pin|relay18_Pin|relay19_Pin
                          |relay20_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004c2:	2301      	movs	r3, #1
 80004c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ca:	2302      	movs	r3, #2
 80004cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	4619      	mov	r1, r3
 80004d4:	481b      	ldr	r0, [pc, #108]	; (8000544 <MX_GPIO_Init+0x114>)
 80004d6:	f000 fd3d 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin;
 80004da:	230c      	movs	r3, #12
 80004dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004e6:	f107 0310 	add.w	r3, r7, #16
 80004ea:	4619      	mov	r1, r3
 80004ec:	4815      	ldr	r0, [pc, #84]	; (8000544 <MX_GPIO_Init+0x114>)
 80004ee:	f000 fd31 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 80004f2:	2310      	movs	r3, #16
 80004f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f6:	4b15      	ldr	r3, [pc, #84]	; (800054c <MX_GPIO_Init+0x11c>)
 80004f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4812      	ldr	r0, [pc, #72]	; (8000550 <MX_GPIO_Init+0x120>)
 8000506:	f000 fd25 	bl	8000f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : relay1_Pin relay2_Pin relay3_Pin relay11_Pin
                           relay12_Pin relay13_Pin relay14_Pin relay15_Pin
                           relay16_Pin relay4_Pin relay5_Pin relay6_Pin
                           relay7_Pin relay8_Pin relay9_Pin relay10_Pin */
  GPIO_InitStruct.Pin = relay1_Pin|relay2_Pin|relay3_Pin|relay11_Pin
 800050a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800050e:	613b      	str	r3, [r7, #16]
                          |relay12_Pin|relay13_Pin|relay14_Pin|relay15_Pin
                          |relay16_Pin|relay4_Pin|relay5_Pin|relay6_Pin
                          |relay7_Pin|relay8_Pin|relay9_Pin|relay10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000510:	2301      	movs	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2302      	movs	r3, #2
 800051a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	4809      	ldr	r0, [pc, #36]	; (8000548 <MX_GPIO_Init+0x118>)
 8000524:	f000 fd16 	bl	8000f54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 10, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	210a      	movs	r1, #10
 800052c:	200a      	movs	r0, #10
 800052e:	f000 fcda 	bl	8000ee6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000532:	200a      	movs	r0, #10
 8000534:	f000 fcf3 	bl	8000f1e <HAL_NVIC_EnableIRQ>

}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	40011000 	.word	0x40011000
 8000548:	40010c00 	.word	0x40010c00
 800054c:	10210000 	.word	0x10210000
 8000550:	40010800 	.word	0x40010800

08000554 <decode_data>:

/* USER CODE BEGIN 4 */
void decode_data(long int data)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
    short int command = (data >> shift_com) & 0xFF ;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	175b      	asrs	r3, r3, #29
 8000560:	b21b      	sxth	r3, r3
 8000562:	b2db      	uxtb	r3, r3
 8000564:	81fb      	strh	r3, [r7, #14]
    switch (command)
 8000566:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800056a:	2b03      	cmp	r3, #3
 800056c:	d00d      	beq.n	800058a <decode_data+0x36>
 800056e:	2b03      	cmp	r3, #3
 8000570:	dc1d      	bgt.n	80005ae <decode_data+0x5a>
 8000572:	2b01      	cmp	r3, #1
 8000574:	d002      	beq.n	800057c <decode_data+0x28>
 8000576:	2b02      	cmp	r3, #2
 8000578:	d00e      	beq.n	8000598 <decode_data+0x44>
            if (state == idle_state)
            {
                updateRelay (data & Mask_data);
            }
    }
}
 800057a:	e018      	b.n	80005ae <decode_data+0x5a>
            update_state(data & Mask_data);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000582:	4618      	mov	r0, r3
 8000584:	f000 f81a 	bl	80005bc <update_state>
            break;
 8000588:	e011      	b.n	80005ae <decode_data+0x5a>
            send_register(data & Mask_data);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000590:	4618      	mov	r0, r3
 8000592:	f000 f95f 	bl	8000854 <send_register>
            break;
 8000596:	e00a      	b.n	80005ae <decode_data+0x5a>
            if (state == idle_state)
 8000598:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <decode_data+0x64>)
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d106      	bne.n	80005ae <decode_data+0x5a>
                updateRelay (data & Mask_data);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 f838 	bl	800061c <updateRelay>
}
 80005ac:	e7ff      	b.n	80005ae <decode_data+0x5a>
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000038 	.word	0x20000038

080005bc <update_state>:

void update_state(long int data)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
    switch (data)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b02      	cmp	r3, #2
 80005c8:	d015      	beq.n	80005f6 <update_state+0x3a>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	dc18      	bgt.n	8000602 <update_state+0x46>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d003      	beq.n	80005de <update_state+0x22>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d006      	beq.n	80005ea <update_state+0x2e>
 80005dc:	e011      	b.n	8000602 <update_state+0x46>
    {
        case off_state:
            state = off_state;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <update_state+0x5c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	801a      	strh	r2, [r3, #0]
            InitOffState();
 80005e4:	f000 f9ee 	bl	80009c4 <InitOffState>
            break;
 80005e8:	e011      	b.n	800060e <update_state+0x52>
        case idle_state:
            state = idle_state;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <update_state+0x5c>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	801a      	strh	r2, [r3, #0]
            InitIdleState();
 80005f0:	f000 f9f6 	bl	80009e0 <InitIdleState>
            break;
 80005f4:	e00b      	b.n	800060e <update_state+0x52>
        case locked_state:
            state = locked_state;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <update_state+0x5c>)
 80005f8:	2202      	movs	r2, #2
 80005fa:	801a      	strh	r2, [r3, #0]
            InitLockedState();
 80005fc:	f000 f9fe 	bl	80009fc <InitLockedState>
            break;
 8000600:	e005      	b.n	800060e <update_state+0x52>
        default:
            state = error_state;
 8000602:	4b05      	ldr	r3, [pc, #20]	; (8000618 <update_state+0x5c>)
 8000604:	2203      	movs	r2, #3
 8000606:	801a      	strh	r2, [r3, #0]
            InitErrorState();
 8000608:	f000 f9fe 	bl	8000a08 <InitErrorState>
            break;
 800060c:	bf00      	nop

    }
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000038 	.word	0x20000038

0800061c <updateRelay>:

void updateRelay(long int RelayValue)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    relay_state=RelayValue;
 8000624:	4a88      	ldr	r2, [pc, #544]	; (8000848 <updateRelay+0x22c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(relay1_GPIO_Port, relay1_Pin,(RelayValue >> 0) & 1UL);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	b2db      	uxtb	r3, r3
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	b2db      	uxtb	r3, r3
 8000634:	461a      	mov	r2, r3
 8000636:	2101      	movs	r1, #1
 8000638:	4884      	ldr	r0, [pc, #528]	; (800084c <updateRelay+0x230>)
 800063a:	f000 feb9 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay2_GPIO_Port, relay2_Pin,(RelayValue >> 1) & 1UL);
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	105b      	asrs	r3, r3, #1
 8000642:	b2db      	uxtb	r3, r3
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	b2db      	uxtb	r3, r3
 800064a:	461a      	mov	r2, r3
 800064c:	2102      	movs	r1, #2
 800064e:	487f      	ldr	r0, [pc, #508]	; (800084c <updateRelay+0x230>)
 8000650:	f000 feae 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay3_GPIO_Port, relay3_Pin,(RelayValue >> 2) & 1UL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	109b      	asrs	r3, r3, #2
 8000658:	b2db      	uxtb	r3, r3
 800065a:	f003 0301 	and.w	r3, r3, #1
 800065e:	b2db      	uxtb	r3, r3
 8000660:	461a      	mov	r2, r3
 8000662:	2104      	movs	r1, #4
 8000664:	4879      	ldr	r0, [pc, #484]	; (800084c <updateRelay+0x230>)
 8000666:	f000 fea3 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay4_GPIO_Port, relay4_Pin,(RelayValue >> 3) & 1UL);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	10db      	asrs	r3, r3, #3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	b2db      	uxtb	r3, r3
 8000676:	461a      	mov	r2, r3
 8000678:	2108      	movs	r1, #8
 800067a:	4874      	ldr	r0, [pc, #464]	; (800084c <updateRelay+0x230>)
 800067c:	f000 fe98 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay5_GPIO_Port, relay5_Pin,(RelayValue >> 4) & 1UL);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	111b      	asrs	r3, r3, #4
 8000684:	b2db      	uxtb	r3, r3
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	2110      	movs	r1, #16
 8000690:	486e      	ldr	r0, [pc, #440]	; (800084c <updateRelay+0x230>)
 8000692:	f000 fe8d 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay6_GPIO_Port, relay6_Pin,(RelayValue >> 5) & 1UL);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	115b      	asrs	r3, r3, #5
 800069a:	b2db      	uxtb	r3, r3
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	2120      	movs	r1, #32
 80006a6:	4869      	ldr	r0, [pc, #420]	; (800084c <updateRelay+0x230>)
 80006a8:	f000 fe82 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay7_GPIO_Port, relay7_Pin,(RelayValue >> 6) & 1UL);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	119b      	asrs	r3, r3, #6
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	4863      	ldr	r0, [pc, #396]	; (800084c <updateRelay+0x230>)
 80006be:	f000 fe77 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay8_GPIO_Port, relay8_Pin,(RelayValue >> 7) & 1UL);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	11db      	asrs	r3, r3, #7
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	461a      	mov	r2, r3
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	485e      	ldr	r0, [pc, #376]	; (800084c <updateRelay+0x230>)
 80006d4:	f000 fe6c 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay9_GPIO_Port, relay9_Pin,(RelayValue >> 8) & 1UL);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	121b      	asrs	r3, r3, #8
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	461a      	mov	r2, r3
 80006e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ea:	4858      	ldr	r0, [pc, #352]	; (800084c <updateRelay+0x230>)
 80006ec:	f000 fe60 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay10_GPIO_Port, relay10_Pin,(RelayValue >> 9) & 1UL);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	125b      	asrs	r3, r3, #9
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	f003 0301 	and.w	r3, r3, #1
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000702:	4852      	ldr	r0, [pc, #328]	; (800084c <updateRelay+0x230>)
 8000704:	f000 fe54 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay11_GPIO_Port, relay11_Pin,(RelayValue >> 10) & 1UL);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	129b      	asrs	r3, r3, #10
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	b2db      	uxtb	r3, r3
 8000714:	461a      	mov	r2, r3
 8000716:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800071a:	484c      	ldr	r0, [pc, #304]	; (800084c <updateRelay+0x230>)
 800071c:	f000 fe48 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay12_GPIO_Port, relay12_Pin,(RelayValue >> 11) & 1UL);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	12db      	asrs	r3, r3, #11
 8000724:	b2db      	uxtb	r3, r3
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	b2db      	uxtb	r3, r3
 800072c:	461a      	mov	r2, r3
 800072e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000732:	4846      	ldr	r0, [pc, #280]	; (800084c <updateRelay+0x230>)
 8000734:	f000 fe3c 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay13_GPIO_Port, relay13_Pin,(RelayValue >> 12) & 1UL);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	131b      	asrs	r3, r3, #12
 800073c:	b2db      	uxtb	r3, r3
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	b2db      	uxtb	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074a:	4840      	ldr	r0, [pc, #256]	; (800084c <updateRelay+0x230>)
 800074c:	f000 fe30 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay14_GPIO_Port, relay14_Pin,(RelayValue >> 13) & 1UL);
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	135b      	asrs	r3, r3, #13
 8000754:	b2db      	uxtb	r3, r3
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	b2db      	uxtb	r3, r3
 800075c:	461a      	mov	r2, r3
 800075e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000762:	483a      	ldr	r0, [pc, #232]	; (800084c <updateRelay+0x230>)
 8000764:	f000 fe24 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay15_GPIO_Port, relay15_Pin,(RelayValue >> 14) & 1UL);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	139b      	asrs	r3, r3, #14
 800076c:	b2db      	uxtb	r3, r3
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	b2db      	uxtb	r3, r3
 8000774:	461a      	mov	r2, r3
 8000776:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800077a:	4834      	ldr	r0, [pc, #208]	; (800084c <updateRelay+0x230>)
 800077c:	f000 fe18 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay16_GPIO_Port, relay16_Pin,(RelayValue >> 15) & 1UL);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	13db      	asrs	r3, r3, #15
 8000784:	b2db      	uxtb	r3, r3
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000792:	482e      	ldr	r0, [pc, #184]	; (800084c <updateRelay+0x230>)
 8000794:	f000 fe0c 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay17_GPIO_Port, relay17_Pin,(RelayValue >> 16) & 1UL);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	141b      	asrs	r3, r3, #16
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007aa:	4829      	ldr	r0, [pc, #164]	; (8000850 <updateRelay+0x234>)
 80007ac:	f000 fe00 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay18_GPIO_Port, relay18_Pin,(RelayValue >> 17) & 1UL);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	145b      	asrs	r3, r3, #17
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	461a      	mov	r2, r3
 80007be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c2:	4823      	ldr	r0, [pc, #140]	; (8000850 <updateRelay+0x234>)
 80007c4:	f000 fdf4 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay19_GPIO_Port, relay19_Pin,(RelayValue >> 18) & 1UL);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	149b      	asrs	r3, r3, #18
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007da:	481d      	ldr	r0, [pc, #116]	; (8000850 <updateRelay+0x234>)
 80007dc:	f000 fde8 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay20_GPIO_Port, relay20_Pin,(RelayValue >> 19) & 1UL);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	14db      	asrs	r3, r3, #19
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	461a      	mov	r2, r3
 80007ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f2:	4817      	ldr	r0, [pc, #92]	; (8000850 <updateRelay+0x234>)
 80007f4:	f000 fddc 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay21_GPIO_Port, relay21_Pin,(RelayValue >> 20) & 1UL);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	151b      	asrs	r3, r3, #20
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	b2db      	uxtb	r3, r3
 8000804:	461a      	mov	r2, r3
 8000806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080a:	4811      	ldr	r0, [pc, #68]	; (8000850 <updateRelay+0x234>)
 800080c:	f000 fdd0 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay22_GPIO_Port, relay22_Pin,(RelayValue >> 21) & 1UL);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	155b      	asrs	r3, r3, #21
 8000814:	b2db      	uxtb	r3, r3
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <updateRelay+0x234>)
 8000824:	f000 fdc4 	bl	80013b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(relay23_GPIO_Port, relay23_Pin,(RelayValue >> 22) & 1UL);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	159b      	asrs	r3, r3, #22
 800082c:	b2db      	uxtb	r3, r3
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	461a      	mov	r2, r3
 8000836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <updateRelay+0x234>)
 800083c:	f000 fdb8 	bl	80013b0 <HAL_GPIO_WritePin>

}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	2000002c 	.word	0x2000002c
 800084c:	40010c00 	.word	0x40010c00
 8000850:	40011000 	.word	0x40011000

08000854 <send_register>:

void send_register(long int add)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
   switch (add)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d003      	beq.n	800086a <send_register+0x16>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d004      	beq.n	8000872 <send_register+0x1e>
 8000868:	e009      	b.n	800087e <send_register+0x2a>
    {
        case ID_add:
            Data2buff((long int)DEVICE_ID);
 800086a:	2009      	movs	r0, #9
 800086c:	f000 f88c 	bl	8000988 <Data2buff>
            break;
 8000870:	e009      	b.n	8000886 <send_register+0x32>
        case state_add:
           Data2buff((long int)state);
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <send_register+0x3c>)
 8000874:	881b      	ldrh	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f886 	bl	8000988 <Data2buff>
            break;
 800087c:	e003      	b.n	8000886 <send_register+0x32>

        default :
            Data2buff((long int)0x00);
 800087e:	2000      	movs	r0, #0
 8000880:	f000 f882 	bl	8000988 <Data2buff>
            break;
 8000884:	bf00      	nop
    }
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000038 	.word	0x20000038

08000894 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008a4:	d123      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x5a>
	{

		 if (cnt_slow >= div_cnt_slow)
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <HAL_TIM_PeriodElapsedCallback+0x68>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	db06      	blt.n	80008c0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		  {
			  cnt_slow = 0 ;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
			  tick_slow = 1;
 80008b8:	4b11      	ldr	r3, [pc, #68]	; (8000900 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e004      	b.n	80008ca <HAL_TIM_PeriodElapsedCallback+0x36>

		  }
		  else
		  {
			  cnt_slow++;
 80008c0:	4b0d      	ldr	r3, [pc, #52]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	3301      	adds	r3, #1
 80008c6:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008c8:	6013      	str	r3, [r2, #0]
		  }

		 if (cnt_fast >= div_cnt_fast)
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	db06      	blt.n	80008e4 <HAL_TIM_PeriodElapsedCallback+0x50>
		  {
			 cnt_fast = 0 ;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
			 tick_fast = 1;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <HAL_TIM_PeriodElapsedCallback+0x78>)
 80008de:	2201      	movs	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
		  else
		  {
			  cnt_fast++;
		  }
	}
}
 80008e2:	e004      	b.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x5a>
			  cnt_fast++;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008ec:	6013      	str	r3, [r2, #0]
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	20000048 	.word	0x20000048
 80008fc:	200000ac 	.word	0x200000ac
 8000900:	20000050 	.word	0x20000050
 8000904:	20000040 	.word	0x20000040
 8000908:	20000034 	.word	0x20000034
 800090c:	200000b0 	.word	0x200000b0

08000910 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af02      	add	r7, sp, #8
 8000916:	4603      	mov	r3, r0
 8000918:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == SS_Pin)
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	2b10      	cmp	r3, #16
 800091e:	d124      	bne.n	800096a <HAL_GPIO_EXTI_Callback+0x5a>
    {
    	HAL_SPI_TransmitReceive(&hspi1, txBuff,rxBuff, 4, 10);
 8000920:	230a      	movs	r3, #10
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2304      	movs	r3, #4
 8000926:	4a13      	ldr	r2, [pc, #76]	; (8000974 <HAL_GPIO_EXTI_Callback+0x64>)
 8000928:	4913      	ldr	r1, [pc, #76]	; (8000978 <HAL_GPIO_EXTI_Callback+0x68>)
 800092a:	4814      	ldr	r0, [pc, #80]	; (800097c <HAL_GPIO_EXTI_Callback+0x6c>)
 800092c:	f001 fa20 	bl	8001d70 <HAL_SPI_TransmitReceive>
        data_from_AD2 = (rxBuff[0] << 24) | (rxBuff[1] << 16) | (rxBuff[2] << 8) | (rxBuff[3]);
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <HAL_GPIO_EXTI_Callback+0x64>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	061a      	lsls	r2, r3, #24
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_GPIO_EXTI_Callback+0x64>)
 8000938:	785b      	ldrb	r3, [r3, #1]
 800093a:	041b      	lsls	r3, r3, #16
 800093c:	431a      	orrs	r2, r3
 800093e:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_GPIO_EXTI_Callback+0x64>)
 8000940:	789b      	ldrb	r3, [r3, #2]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	4313      	orrs	r3, r2
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <HAL_GPIO_EXTI_Callback+0x64>)
 8000948:	78d2      	ldrb	r2, [r2, #3]
 800094a:	4313      	orrs	r3, r2
 800094c:	4a0c      	ldr	r2, [pc, #48]	; (8000980 <HAL_GPIO_EXTI_Callback+0x70>)
 800094e:	6013      	str	r3, [r2, #0]

        HAL_SPI_DeInit(&hspi1); // reset the state machine back to original state
 8000950:	480a      	ldr	r0, [pc, #40]	; (800097c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000952:	f001 f9e5 	bl	8001d20 <HAL_SPI_DeInit>
        HAL_SPI_Init(&hspi1) ;	//avoid false detection (dirty hack but ...)
 8000956:	4809      	ldr	r0, [pc, #36]	; (800097c <HAL_GPIO_EXTI_Callback+0x6c>)
 8000958:	f001 f95e 	bl	8001c18 <HAL_SPI_Init>

        if (data_from_AD2)
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_GPIO_EXTI_Callback+0x70>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <HAL_GPIO_EXTI_Callback+0x5a>
            new_32bitsSPI = 1;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_GPIO_EXTI_Callback+0x74>)
 8000966:	2201      	movs	r2, #1
 8000968:	801a      	strh	r2, [r3, #0]
    }
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	2000004c 	.word	0x2000004c
 8000978:	2000003c 	.word	0x2000003c
 800097c:	20000054 	.word	0x20000054
 8000980:	20000030 	.word	0x20000030
 8000984:	20000044 	.word	0x20000044

08000988 <Data2buff>:


void Data2buff(long int data)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
    txBuff[0]=(data >> 24) & 0xFF;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	0e1b      	lsrs	r3, r3, #24
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <Data2buff+0x38>)
 8000998:	701a      	strb	r2, [r3, #0]
    txBuff[1]=(data >> 16) & 0xFF;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	141b      	asrs	r3, r3, #16
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <Data2buff+0x38>)
 80009a2:	705a      	strb	r2, [r3, #1]
    txBuff[2]=(data >> 8) & 0xFF;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	121b      	asrs	r3, r3, #8
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <Data2buff+0x38>)
 80009ac:	709a      	strb	r2, [r3, #2]
    txBuff[3]=data & 0xFF;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <Data2buff+0x38>)
 80009b4:	70da      	strb	r2, [r3, #3]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	2000003c 	.word	0x2000003c

080009c4 <InitOffState>:

void InitOffState()
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
    updateRelay(Relay_Default);
 80009c8:	2000      	movs	r0, #0
 80009ca:	f7ff fe27 	bl	800061c <updateRelay>
    HAL_GPIO_WritePin(errorLED_GPIO_Port, errorLED_Pin,0);
 80009ce:	2200      	movs	r2, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	4802      	ldr	r0, [pc, #8]	; (80009dc <InitOffState+0x18>)
 80009d4:	f000 fcec 	bl	80013b0 <HAL_GPIO_WritePin>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40011000 	.word	0x40011000

080009e0 <InitIdleState>:

void InitIdleState()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

    updateRelay(Relay_Default);
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff fe19 	bl	800061c <updateRelay>
	HAL_GPIO_WritePin(statusLED_GPIO_Port, statusLED_Pin,1);
 80009ea:	2201      	movs	r2, #1
 80009ec:	2102      	movs	r1, #2
 80009ee:	4802      	ldr	r0, [pc, #8]	; (80009f8 <InitIdleState+0x18>)
 80009f0:	f000 fcde 	bl	80013b0 <HAL_GPIO_WritePin>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40011000 	.word	0x40011000

080009fc <InitLockedState>:

void InitLockedState()
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	//Do something
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr

08000a08 <InitErrorState>:

void InitErrorState()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(statusLED_GPIO_Port, statusLED_Pin,0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2102      	movs	r1, #2
 8000a10:	4803      	ldr	r0, [pc, #12]	; (8000a20 <InitErrorState+0x18>)
 8000a12:	f000 fccd 	bl	80013b0 <HAL_GPIO_WritePin>
    updateRelay(Relay_Default);
 8000a16:	2000      	movs	r0, #0
 8000a18:	f7ff fe00 	bl	800061c <updateRelay>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40011000 	.word	0x40011000

08000a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a28:	b672      	cpsid	i
}
 8000a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <Error_Handler+0x8>
	...

08000a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a38:	699b      	ldr	r3, [r3, #24]
 8000a3a:	4a14      	ldr	r2, [pc, #80]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a58:	61d3      	str	r3, [r2, #28]
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_MspInit+0x5c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_MspInit+0x60>)
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	60fb      	str	r3, [r7, #12]
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_MspInit+0x60>)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bc80      	pop	{r7}
 8000a8a:	4770      	bx	lr
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	40010000 	.word	0x40010000

08000a94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a1b      	ldr	r2, [pc, #108]	; (8000b1c <HAL_SPI_MspInit+0x88>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d12f      	bne.n	8000b14 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000aba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000abe:	6193      	str	r3, [r2, #24]
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a13      	ldr	r2, [pc, #76]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <HAL_SPI_MspInit+0x8c>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f003 0304 	and.w	r3, r3, #4
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ae4:	23a0      	movs	r3, #160	; 0xa0
 8000ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af0:	f107 0310 	add.w	r3, r7, #16
 8000af4:	4619      	mov	r1, r3
 8000af6:	480b      	ldr	r0, [pc, #44]	; (8000b24 <HAL_SPI_MspInit+0x90>)
 8000af8:	f000 fa2c 	bl	8000f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000afc:	2340      	movs	r3, #64	; 0x40
 8000afe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b00:	2302      	movs	r3, #2
 8000b02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <HAL_SPI_MspInit+0x90>)
 8000b10:	f000 fa20 	bl	8000f54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40013000 	.word	0x40013000
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010800 	.word	0x40010800

08000b28 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_SPI_MspDeInit+0x30>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d109      	bne.n	8000b4e <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HAL_SPI_MspDeInit+0x34>)
 8000b3c:	699b      	ldr	r3, [r3, #24]
 8000b3e:	4a07      	ldr	r2, [pc, #28]	; (8000b5c <HAL_SPI_MspDeInit+0x34>)
 8000b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b44:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8000b46:	21e0      	movs	r1, #224	; 0xe0
 8000b48:	4805      	ldr	r0, [pc, #20]	; (8000b60 <HAL_SPI_MspDeInit+0x38>)
 8000b4a:	f000 fb7d 	bl	8001248 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40013000 	.word	0x40013000
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010800 	.word	0x40010800

08000b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b74:	d113      	bne.n	8000b9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_TIM_Base_MspInit+0x44>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	201c      	movs	r0, #28
 8000b94:	f000 f9a7 	bl	8000ee6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b98:	201c      	movs	r0, #28
 8000b9a:	f000 f9c0 	bl	8000f1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	3710      	adds	r7, #16
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <NMI_Handler+0x4>

08000bb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <HardFault_Handler+0x4>

08000bb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <MemManage_Handler+0x4>

08000bbe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <BusFault_Handler+0x4>

08000bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <UsageFault_Handler+0x4>

08000bca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr

08000be2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf2:	f000 f885 	bl	8000d00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000bfe:	2010      	movs	r0, #16
 8000c00:	f000 fc08 	bl	8001414 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c0c:	4802      	ldr	r0, [pc, #8]	; (8000c18 <TIM2_IRQHandler+0x10>)
 8000c0e:	f001 fb93 	bl	8002338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200000b4 	.word	0x200000b4

08000c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr

08000c28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c4e:	f7ff ffe5 	bl	8000c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c52:	f001 feb9 	bl	80029c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c56:	f7ff fa79 	bl	800014c <main>
  bx lr
 8000c5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c64:	08002a60 	.word	0x08002a60
  ldr r2, =_sbss
 8000c68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c6c:	20000100 	.word	0x20000100

08000c70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_2_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c78:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <HAL_Init+0x28>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_Init+0x28>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f923 	bl	8000ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	f000 f808 	bl	8000ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c90:	f7ff fece 	bl	8000a30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40022000 	.word	0x40022000

08000ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ca8:	4b12      	ldr	r3, [pc, #72]	; (8000cf4 <HAL_InitTick+0x54>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x58>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f93b 	bl	8000f3a <HAL_SYSTICK_Config>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00e      	b.n	8000cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d80a      	bhi.n	8000cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	6879      	ldr	r1, [r7, #4]
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cdc:	f000 f903 	bl	8000ee6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce0:	4a06      	ldr	r2, [pc, #24]	; (8000cfc <HAL_InitTick+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004

08000d00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d04:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <HAL_IncTick+0x1c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_IncTick+0x20>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4413      	add	r3, r2
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <HAL_IncTick+0x20>)
 8000d12:	6013      	str	r3, [r2, #0]
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	200000fc 	.word	0x200000fc

08000d24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b02      	ldr	r3, [pc, #8]	; (8000d34 <HAL_GetTick+0x10>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr
 8000d34:	200000fc 	.word	0x200000fc

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4906      	ldr	r1, [pc, #24]	; (8000dd0 <__NVIC_EnableIRQ+0x34>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bc80      	pop	{r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
         );
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e9c:	d301      	bcc.n	8000ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e00f      	b.n	8000ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <SysTick_Config+0x40>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3b01      	subs	r3, #1
 8000ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eaa:	210f      	movs	r1, #15
 8000eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000eb0:	f7ff ff90 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <SysTick_Config+0x40>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eba:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <SysTick_Config+0x40>)
 8000ebc:	2207      	movs	r2, #7
 8000ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	e000e010 	.word	0xe000e010

08000ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ff2d 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b086      	sub	sp, #24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ef8:	f7ff ff42 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000efc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	68b9      	ldr	r1, [r7, #8]
 8000f02:	6978      	ldr	r0, [r7, #20]
 8000f04:	f7ff ff90 	bl	8000e28 <NVIC_EncodePriority>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff5f 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f16:	bf00      	nop
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ff35 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b082      	sub	sp, #8
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffa2 	bl	8000e8c <SysTick_Config>
 8000f48:	4603      	mov	r3, r0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
	...

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b08b      	sub	sp, #44	; 0x2c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e148      	b.n	80011fa <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 8137 	bne.w	80011f4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4aa3      	ldr	r2, [pc, #652]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d05e      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000f90:	4aa1      	ldr	r2, [pc, #644]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d875      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000f96:	4aa1      	ldr	r2, [pc, #644]	; (800121c <HAL_GPIO_Init+0x2c8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d058      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000f9c:	4a9f      	ldr	r2, [pc, #636]	; (800121c <HAL_GPIO_Init+0x2c8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d86f      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fa2:	4a9f      	ldr	r2, [pc, #636]	; (8001220 <HAL_GPIO_Init+0x2cc>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d052      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fa8:	4a9d      	ldr	r2, [pc, #628]	; (8001220 <HAL_GPIO_Init+0x2cc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d869      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fae:	4a9d      	ldr	r2, [pc, #628]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d04c      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fb4:	4a9b      	ldr	r2, [pc, #620]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d863      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fba:	4a9b      	ldr	r2, [pc, #620]	; (8001228 <HAL_GPIO_Init+0x2d4>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d046      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fc0:	4a99      	ldr	r2, [pc, #612]	; (8001228 <HAL_GPIO_Init+0x2d4>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d85d      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fc6:	2b12      	cmp	r3, #18
 8000fc8:	d82a      	bhi.n	8001020 <HAL_GPIO_Init+0xcc>
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d859      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fce:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <HAL_GPIO_Init+0x80>)
 8000fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	08001029 	.word	0x08001029
 8000fdc:	0800103b 	.word	0x0800103b
 8000fe0:	0800107d 	.word	0x0800107d
 8000fe4:	08001083 	.word	0x08001083
 8000fe8:	08001083 	.word	0x08001083
 8000fec:	08001083 	.word	0x08001083
 8000ff0:	08001083 	.word	0x08001083
 8000ff4:	08001083 	.word	0x08001083
 8000ff8:	08001083 	.word	0x08001083
 8000ffc:	08001083 	.word	0x08001083
 8001000:	08001083 	.word	0x08001083
 8001004:	08001083 	.word	0x08001083
 8001008:	08001083 	.word	0x08001083
 800100c:	08001083 	.word	0x08001083
 8001010:	08001083 	.word	0x08001083
 8001014:	08001083 	.word	0x08001083
 8001018:	08001031 	.word	0x08001031
 800101c:	08001045 	.word	0x08001045
 8001020:	4a82      	ldr	r2, [pc, #520]	; (800122c <HAL_GPIO_Init+0x2d8>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001026:	e02c      	b.n	8001082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	623b      	str	r3, [r7, #32]
          break;
 800102e:	e029      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	3304      	adds	r3, #4
 8001036:	623b      	str	r3, [r7, #32]
          break;
 8001038:	e024      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	3308      	adds	r3, #8
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e01f      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	330c      	adds	r3, #12
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e01a      	b.n	8001084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001056:	2304      	movs	r3, #4
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e013      	b.n	8001084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d105      	bne.n	8001070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	611a      	str	r2, [r3, #16]
          break;
 800106e:	e009      	b.n	8001084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	615a      	str	r2, [r3, #20]
          break;
 800107a:	e003      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
          break;
 8001080:	e000      	b.n	8001084 <HAL_GPIO_Init+0x130>
          break;
 8001082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2bff      	cmp	r3, #255	; 0xff
 8001088:	d801      	bhi.n	800108e <HAL_GPIO_Init+0x13a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	e001      	b.n	8001092 <HAL_GPIO_Init+0x13e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3304      	adds	r3, #4
 8001092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2bff      	cmp	r3, #255	; 0xff
 8001098:	d802      	bhi.n	80010a0 <HAL_GPIO_Init+0x14c>
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_Init+0x152>
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	3b08      	subs	r3, #8
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	210f      	movs	r1, #15
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	401a      	ands	r2, r3
 80010b8:	6a39      	ldr	r1, [r7, #32]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 8090 	beq.w	80011f4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010d4:	4b56      	ldr	r3, [pc, #344]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a55      	ldr	r2, [pc, #340]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b53      	ldr	r3, [pc, #332]	; (8001230 <HAL_GPIO_Init+0x2dc>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010ec:	4a51      	ldr	r2, [pc, #324]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a49      	ldr	r2, [pc, #292]	; (8001238 <HAL_GPIO_Init+0x2e4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d00d      	beq.n	8001134 <HAL_GPIO_Init+0x1e0>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a48      	ldr	r2, [pc, #288]	; (800123c <HAL_GPIO_Init+0x2e8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x1dc>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a47      	ldr	r2, [pc, #284]	; (8001240 <HAL_GPIO_Init+0x2ec>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_GPIO_Init+0x1d8>
 8001128:	2302      	movs	r3, #2
 800112a:	e004      	b.n	8001136 <HAL_GPIO_Init+0x1e2>
 800112c:	2303      	movs	r3, #3
 800112e:	e002      	b.n	8001136 <HAL_GPIO_Init+0x1e2>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <HAL_GPIO_Init+0x1e2>
 8001134:	2300      	movs	r3, #0
 8001136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	0092      	lsls	r2, r2, #2
 800113e:	4093      	lsls	r3, r2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001146:	493b      	ldr	r1, [pc, #236]	; (8001234 <HAL_GPIO_Init+0x2e0>)
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	089b      	lsrs	r3, r3, #2
 800114c:	3302      	adds	r3, #2
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4937      	ldr	r1, [pc, #220]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800116e:	4b35      	ldr	r3, [pc, #212]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	43db      	mvns	r3, r3
 8001176:	4933      	ldr	r1, [pc, #204]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 8001178:	4013      	ands	r3, r2
 800117a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001188:	4b2e      	ldr	r3, [pc, #184]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	492d      	ldr	r1, [pc, #180]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001196:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	43db      	mvns	r3, r3
 800119e:	4929      	ldr	r1, [pc, #164]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 80011a0:	4013      	ands	r3, r2
 80011a2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 80011b2:	689a      	ldr	r2, [r3, #8]
 80011b4:	4923      	ldr	r1, [pc, #140]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	608b      	str	r3, [r1, #8]
 80011bc:	e006      	b.n	80011cc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011be:	4b21      	ldr	r3, [pc, #132]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	491f      	ldr	r1, [pc, #124]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	4919      	ldr	r1, [pc, #100]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	60cb      	str	r3, [r1, #12]
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4915      	ldr	r1, [pc, #84]	; (8001244 <HAL_GPIO_Init+0x2f0>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80011f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f6:	3301      	adds	r3, #1
 80011f8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001200:	fa22 f303 	lsr.w	r3, r2, r3
 8001204:	2b00      	cmp	r3, #0
 8001206:	f47f aeaf 	bne.w	8000f68 <HAL_GPIO_Init+0x14>
  }
}
 800120a:	bf00      	nop
 800120c:	bf00      	nop
 800120e:	372c      	adds	r7, #44	; 0x2c
 8001210:	46bd      	mov	sp, r7
 8001212:	bc80      	pop	{r7}
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	10320000 	.word	0x10320000
 800121c:	10310000 	.word	0x10310000
 8001220:	10220000 	.word	0x10220000
 8001224:	10210000 	.word	0x10210000
 8001228:	10120000 	.word	0x10120000
 800122c:	10110000 	.word	0x10110000
 8001230:	40021000 	.word	0x40021000
 8001234:	40010000 	.word	0x40010000
 8001238:	40010800 	.word	0x40010800
 800123c:	40010c00 	.word	0x40010c00
 8001240:	40011000 	.word	0x40011000
 8001244:	40010400 	.word	0x40010400

08001248 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8001256:	e094      	b.n	8001382 <HAL_GPIO_DeInit+0x13a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001258:	2201      	movs	r2, #1
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8087 	beq.w	800137c <HAL_GPIO_DeInit+0x134>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800126e:	4a4b      	ldr	r2, [pc, #300]	; (800139c <HAL_GPIO_DeInit+0x154>)
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	3302      	adds	r3, #2
 8001276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0303 	and.w	r3, r3, #3
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	220f      	movs	r2, #15
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	4013      	ands	r3, r2
 800128e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4a43      	ldr	r2, [pc, #268]	; (80013a0 <HAL_GPIO_DeInit+0x158>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d00d      	beq.n	80012b4 <HAL_GPIO_DeInit+0x6c>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	4a42      	ldr	r2, [pc, #264]	; (80013a4 <HAL_GPIO_DeInit+0x15c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d007      	beq.n	80012b0 <HAL_GPIO_DeInit+0x68>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a41      	ldr	r2, [pc, #260]	; (80013a8 <HAL_GPIO_DeInit+0x160>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d101      	bne.n	80012ac <HAL_GPIO_DeInit+0x64>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e004      	b.n	80012b6 <HAL_GPIO_DeInit+0x6e>
 80012ac:	2303      	movs	r3, #3
 80012ae:	e002      	b.n	80012b6 <HAL_GPIO_DeInit+0x6e>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <HAL_GPIO_DeInit+0x6e>
 80012b4:	2300      	movs	r3, #0
 80012b6:	69fa      	ldr	r2, [r7, #28]
 80012b8:	f002 0203 	and.w	r2, r2, #3
 80012bc:	0092      	lsls	r2, r2, #2
 80012be:	4093      	lsls	r3, r2
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d132      	bne.n	800132c <HAL_GPIO_DeInit+0xe4>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80012d6:	4a31      	ldr	r2, [pc, #196]	; (800139c <HAL_GPIO_DeInit+0x154>)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	43da      	mvns	r2, r3
 80012e6:	482d      	ldr	r0, [pc, #180]	; (800139c <HAL_GPIO_DeInit+0x154>)
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	089b      	lsrs	r3, r3, #2
 80012ec:	400a      	ands	r2, r1
 80012ee:	3302      	adds	r3, #2
 80012f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_GPIO_DeInit+0x164>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	492b      	ldr	r1, [pc, #172]	; (80013ac <HAL_GPIO_DeInit+0x164>)
 80012fe:	4013      	ands	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8001302:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HAL_GPIO_DeInit+0x164>)
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	43db      	mvns	r3, r3
 800130a:	4928      	ldr	r1, [pc, #160]	; (80013ac <HAL_GPIO_DeInit+0x164>)
 800130c:	4013      	ands	r3, r2
 800130e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8001310:	4b26      	ldr	r3, [pc, #152]	; (80013ac <HAL_GPIO_DeInit+0x164>)
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	43db      	mvns	r3, r3
 8001318:	4924      	ldr	r1, [pc, #144]	; (80013ac <HAL_GPIO_DeInit+0x164>)
 800131a:	4013      	ands	r3, r2
 800131c:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_GPIO_DeInit+0x164>)
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	4921      	ldr	r1, [pc, #132]	; (80013ac <HAL_GPIO_DeInit+0x164>)
 8001328:	4013      	ands	r3, r2
 800132a:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2bff      	cmp	r3, #255	; 0xff
 8001330:	d801      	bhi.n	8001336 <HAL_GPIO_DeInit+0xee>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	e001      	b.n	800133a <HAL_GPIO_DeInit+0xf2>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3304      	adds	r3, #4
 800133a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2bff      	cmp	r3, #255	; 0xff
 8001340:	d802      	bhi.n	8001348 <HAL_GPIO_DeInit+0x100>
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_DeInit+0x106>
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3b08      	subs	r3, #8
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	210f      	movs	r1, #15
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	401a      	ands	r2, r3
 8001360:	2104      	movs	r1, #4
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	431a      	orrs	r2, r3
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	401a      	ands	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	3301      	adds	r3, #1
 8001380:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	fa22 f303 	lsr.w	r3, r2, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	f47f af64 	bne.w	8001258 <HAL_GPIO_DeInit+0x10>
  }
}
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr
 800139c:	40010000 	.word	0x40010000
 80013a0:	40010800 	.word	0x40010800
 80013a4:	40010c00 	.word	0x40010c00
 80013a8:	40011000 	.word	0x40011000
 80013ac:	40010400 	.word	0x40010400

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	611a      	str	r2, [r3, #16]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	bc80      	pop	{r7}
 80013de:	4770      	bx	lr

080013e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013f2:	887a      	ldrh	r2, [r7, #2]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4013      	ands	r3, r2
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43d9      	mvns	r1, r3
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	400b      	ands	r3, r1
 8001402:	431a      	orrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	611a      	str	r2, [r3, #16]
}
 8001408:	bf00      	nop
 800140a:	3714      	adds	r7, #20
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr
	...

08001414 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	88fb      	ldrh	r3, [r7, #6]
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d006      	beq.n	8001438 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800142c:	88fb      	ldrh	r3, [r7, #6]
 800142e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff fa6c 	bl	8000910 <HAL_GPIO_EXTI_Callback>
  }
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e26c      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8087 	beq.w	8001572 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001464:	4b92      	ldr	r3, [pc, #584]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 030c 	and.w	r3, r3, #12
 800146c:	2b04      	cmp	r3, #4
 800146e:	d00c      	beq.n	800148a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001470:	4b8f      	ldr	r3, [pc, #572]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 030c 	and.w	r3, r3, #12
 8001478:	2b08      	cmp	r3, #8
 800147a:	d112      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5e>
 800147c:	4b8c      	ldr	r3, [pc, #560]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001488:	d10b      	bne.n	80014a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800148a:	4b89      	ldr	r3, [pc, #548]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d06c      	beq.n	8001570 <HAL_RCC_OscConfig+0x12c>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d168      	bne.n	8001570 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e246      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x76>
 80014ac:	4b80      	ldr	r3, [pc, #512]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a7f      	ldr	r2, [pc, #508]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014b6:	6013      	str	r3, [r2, #0]
 80014b8:	e02e      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x98>
 80014c2:	4b7b      	ldr	r3, [pc, #492]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a7a      	ldr	r2, [pc, #488]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	4b78      	ldr	r3, [pc, #480]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a77      	ldr	r2, [pc, #476]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	e01d      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e4:	d10c      	bne.n	8001500 <HAL_RCC_OscConfig+0xbc>
 80014e6:	4b72      	ldr	r3, [pc, #456]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a71      	ldr	r2, [pc, #452]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a6e      	ldr	r2, [pc, #440]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80014f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e00b      	b.n	8001518 <HAL_RCC_OscConfig+0xd4>
 8001500:	4b6b      	ldr	r3, [pc, #428]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a6a      	ldr	r2, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150a:	6013      	str	r3, [r2, #0]
 800150c:	4b68      	ldr	r3, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a67      	ldr	r2, [pc, #412]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001516:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d013      	beq.n	8001548 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fc00 	bl	8000d24 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001528:	f7ff fbfc 	bl	8000d24 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b64      	cmp	r3, #100	; 0x64
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e1fa      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800153a:	4b5d      	ldr	r3, [pc, #372]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0f0      	beq.n	8001528 <HAL_RCC_OscConfig+0xe4>
 8001546:	e014      	b.n	8001572 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fbec 	bl	8000d24 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fbe8 	bl	8000d24 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1e6      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001562:	4b53      	ldr	r3, [pc, #332]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x10c>
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d063      	beq.n	8001646 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157e:	4b4c      	ldr	r3, [pc, #304]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b00      	cmp	r3, #0
 8001588:	d00b      	beq.n	80015a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800158a:	4b49      	ldr	r3, [pc, #292]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b08      	cmp	r3, #8
 8001594:	d11c      	bne.n	80015d0 <HAL_RCC_OscConfig+0x18c>
 8001596:	4b46      	ldr	r3, [pc, #280]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a2:	4b43      	ldr	r3, [pc, #268]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x176>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d001      	beq.n	80015ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e1ba      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	4939      	ldr	r1, [pc, #228]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	e03a      	b.n	8001646 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d020      	beq.n	800161a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 80015da:	2201      	movs	r2, #1
 80015dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015de:	f7ff fba1 	bl	8000d24 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e6:	f7ff fb9d 	bl	8000d24 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e19b      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4927      	ldr	r1, [pc, #156]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e015      	b.n	8001646 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800161a:	4b26      	ldr	r3, [pc, #152]	; (80016b4 <HAL_RCC_OscConfig+0x270>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fb80 	bl	8000d24 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001628:	f7ff fb7c 	bl	8000d24 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e17a      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d03a      	beq.n	80016c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d019      	beq.n	800168e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_RCC_OscConfig+0x274>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fb60 	bl	8000d24 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fb5c 	bl	8000d24 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e15a      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_RCC_OscConfig+0x26c>)
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001686:	2001      	movs	r0, #1
 8001688:	f000 faa8 	bl	8001bdc <RCC_Delay>
 800168c:	e01c      	b.n	80016c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_RCC_OscConfig+0x274>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fb46 	bl	8000d24 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169a:	e00f      	b.n	80016bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800169c:	f7ff fb42 	bl	8000d24 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d908      	bls.n	80016bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e140      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
 80016ae:	bf00      	nop
 80016b0:	40021000 	.word	0x40021000
 80016b4:	42420000 	.word	0x42420000
 80016b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b9e      	ldr	r3, [pc, #632]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1e9      	bne.n	800169c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 80a6 	beq.w	8001822 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b97      	ldr	r3, [pc, #604]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10d      	bne.n	8001702 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	4b94      	ldr	r3, [pc, #592]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	4a93      	ldr	r2, [pc, #588]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80016ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f0:	61d3      	str	r3, [r2, #28]
 80016f2:	4b91      	ldr	r3, [pc, #580]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016fe:	2301      	movs	r3, #1
 8001700:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001702:	4b8e      	ldr	r3, [pc, #568]	; (800193c <HAL_RCC_OscConfig+0x4f8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170a:	2b00      	cmp	r3, #0
 800170c:	d118      	bne.n	8001740 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800170e:	4b8b      	ldr	r3, [pc, #556]	; (800193c <HAL_RCC_OscConfig+0x4f8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a8a      	ldr	r2, [pc, #552]	; (800193c <HAL_RCC_OscConfig+0x4f8>)
 8001714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171a:	f7ff fb03 	bl	8000d24 <HAL_GetTick>
 800171e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001722:	f7ff faff 	bl	8000d24 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b64      	cmp	r3, #100	; 0x64
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e0fd      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b81      	ldr	r3, [pc, #516]	; (800193c <HAL_RCC_OscConfig+0x4f8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0f0      	beq.n	8001722 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d106      	bne.n	8001756 <HAL_RCC_OscConfig+0x312>
 8001748:	4b7b      	ldr	r3, [pc, #492]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4a7a      	ldr	r2, [pc, #488]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6213      	str	r3, [r2, #32]
 8001754:	e02d      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d10c      	bne.n	8001778 <HAL_RCC_OscConfig+0x334>
 800175e:	4b76      	ldr	r3, [pc, #472]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	4a75      	ldr	r2, [pc, #468]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6213      	str	r3, [r2, #32]
 800176a:	4b73      	ldr	r3, [pc, #460]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	4a72      	ldr	r2, [pc, #456]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6213      	str	r3, [r2, #32]
 8001776:	e01c      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	2b05      	cmp	r3, #5
 800177e:	d10c      	bne.n	800179a <HAL_RCC_OscConfig+0x356>
 8001780:	4b6d      	ldr	r3, [pc, #436]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a6c      	ldr	r2, [pc, #432]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a69      	ldr	r2, [pc, #420]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	6213      	str	r3, [r2, #32]
 8001798:	e00b      	b.n	80017b2 <HAL_RCC_OscConfig+0x36e>
 800179a:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	6a1b      	ldr	r3, [r3, #32]
 800179e:	4a66      	ldr	r2, [pc, #408]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	f023 0301 	bic.w	r3, r3, #1
 80017a4:	6213      	str	r3, [r2, #32]
 80017a6:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	4a63      	ldr	r2, [pc, #396]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d015      	beq.n	80017e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ba:	f7ff fab3 	bl	8000d24 <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c0:	e00a      	b.n	80017d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c2:	f7ff faaf 	bl	8000d24 <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e0ab      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	4b57      	ldr	r3, [pc, #348]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	f003 0302 	and.w	r3, r3, #2
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ee      	beq.n	80017c2 <HAL_RCC_OscConfig+0x37e>
 80017e4:	e014      	b.n	8001810 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fa9d 	bl	8000d24 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fa99 	bl	8000d24 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e095      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001804:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1ee      	bne.n	80017ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d105      	bne.n	8001822 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001816:	4b48      	ldr	r3, [pc, #288]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	4a47      	ldr	r2, [pc, #284]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001820:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 8081 	beq.w	800192e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182c:	4b42      	ldr	r3, [pc, #264]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d061      	beq.n	80018fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d146      	bne.n	80018ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_RCC_OscConfig+0x4fc>)
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff fa6d 	bl	8000d24 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff fa69 	bl	8000d24 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e067      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f0      	bne.n	800184e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d108      	bne.n	8001888 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001876:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	492d      	ldr	r1, [pc, #180]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001888:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a19      	ldr	r1, [r3, #32]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001898:	430b      	orrs	r3, r1
 800189a:	4927      	ldr	r1, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <HAL_RCC_OscConfig+0x4fc>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff fa3d 	bl	8000d24 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ae:	f7ff fa39 	bl	8000d24 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e037      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x46a>
 80018cc:	e02f      	b.n	800192e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ce:	4b1c      	ldr	r3, [pc, #112]	; (8001940 <HAL_RCC_OscConfig+0x4fc>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff fa26 	bl	8000d24 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018dc:	f7ff fa22 	bl	8000d24 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e020      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ee:	4b12      	ldr	r3, [pc, #72]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x498>
 80018fa:	e018      	b.n	800192e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69db      	ldr	r3, [r3, #28]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e013      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a1b      	ldr	r3, [r3, #32]
 8001918:	429a      	cmp	r2, r3
 800191a:	d106      	bne.n	800192a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001926:	429a      	cmp	r2, r3
 8001928:	d001      	beq.n	800192e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021000 	.word	0x40021000
 800193c:	40007000 	.word	0x40007000
 8001940:	42420060 	.word	0x42420060

08001944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0d0      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d910      	bls.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f023 0207 	bic.w	r2, r3, #7
 800196e:	4965      	ldr	r1, [pc, #404]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	4a58      	ldr	r2, [pc, #352]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	4a52      	ldr	r2, [pc, #328]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d040      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d115      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e073      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3d      	ldr	r3, [pc, #244]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e06b      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b39      	ldr	r3, [pc, #228]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4936      	ldr	r1, [pc, #216]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7ff f976 	bl	8000d24 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff f972 	bl	8000d24 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e053      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2d      	ldr	r3, [pc, #180]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d210      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 0207 	bic.w	r2, r3, #7
 8001a7a:	4922      	ldr	r1, [pc, #136]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f821 	bl	8001b18 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490a      	ldr	r1, [pc, #40]	; (8001b0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <HAL_RCC_ClockConfig+0x1cc>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_RCC_ClockConfig+0x1d0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f8d4 	bl	8000ca0 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	08002a48 	.word	0x08002a48
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b18:	b490      	push	{r4, r7}
 8001b1a:	b08a      	sub	sp, #40	; 0x28
 8001b1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b1e:	4b2a      	ldr	r3, [pc, #168]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b20:	1d3c      	adds	r4, r7, #4
 8001b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b28:	f240 2301 	movw	r3, #513	; 0x201
 8001b2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 030c 	and.w	r3, r3, #12
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d002      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x40>
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_GetSysClockFreq+0x46>
 8001b56:	e02d      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b5a:	623b      	str	r3, [r7, #32]
      break;
 8001b5c:	e02d      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	0c9b      	lsrs	r3, r3, #18
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b70:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	0c5b      	lsrs	r3, r3, #17
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b8a:	4413      	add	r3, r2
 8001b8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	4a0e      	ldr	r2, [pc, #56]	; (8001bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b96:	fb02 f203 	mul.w	r2, r2, r3
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba2:	e004      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	4a0b      	ldr	r2, [pc, #44]	; (8001bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	623b      	str	r3, [r7, #32]
      break;
 8001bb2:	e002      	b.n	8001bba <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001bb4:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bb6:	623b      	str	r3, [r7, #32]
      break;
 8001bb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bba:	6a3b      	ldr	r3, [r7, #32]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3728      	adds	r7, #40	; 0x28
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc90      	pop	{r4, r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	08002a38 	.word	0x08002a38
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	00f42400 	.word	0x00f42400
 8001bd4:	003d0900 	.word	0x003d0900
 8001bd8:	007a1200 	.word	0x007a1200

08001bdc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <RCC_Delay+0x34>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <RCC_Delay+0x38>)
 8001bea:	fba2 2303 	umull	r2, r3, r2, r3
 8001bee:	0a5b      	lsrs	r3, r3, #9
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bf8:	bf00      	nop
  }
  while (Delay --);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	60fa      	str	r2, [r7, #12]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1f9      	bne.n	8001bf8 <RCC_Delay+0x1c>
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000000 	.word	0x20000000
 8001c14:	10624dd3 	.word	0x10624dd3

08001c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e076      	b.n	8001d18 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d108      	bne.n	8001c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001c3a:	d009      	beq.n	8001c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	61da      	str	r2, [r3, #28]
 8001c42:	e005      	b.n	8001c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7fe ff12 	bl	8000a94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c86:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca2:	431a      	orrs	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	431a      	orrs	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cca:	431a      	orrs	r2, r3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cd4:	ea42 0103 	orr.w	r1, r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	0c1a      	lsrs	r2, r3, #16
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f002 0204 	and.w	r2, r2, #4
 8001cf6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	69da      	ldr	r2, [r3, #28]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d06:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e01a      	b.n	8001d68 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2202      	movs	r2, #2
 8001d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d48:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7fe feec 	bl	8000b28 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3708      	adds	r7, #8
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	; 0x30
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
 8001d7c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_SPI_TransmitReceive+0x26>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e18a      	b.n	80020ac <HAL_SPI_TransmitReceive+0x33c>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d9e:	f7fe ffc1 	bl	8000d24 <HAL_GetTick>
 8001da2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001db4:	887b      	ldrh	r3, [r7, #2]
 8001db6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001db8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d00f      	beq.n	8001de0 <HAL_SPI_TransmitReceive+0x70>
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001dc6:	d107      	bne.n	8001dd8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d103      	bne.n	8001dd8 <HAL_SPI_TransmitReceive+0x68>
 8001dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d003      	beq.n	8001de0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001dde:	e15b      	b.n	8002098 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d005      	beq.n	8001df2 <HAL_SPI_TransmitReceive+0x82>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <HAL_SPI_TransmitReceive+0x82>
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001df8:	e14e      	b.n	8002098 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b04      	cmp	r3, #4
 8001e04:	d003      	beq.n	8001e0e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2205      	movs	r2, #5
 8001e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	887a      	ldrh	r2, [r7, #2]
 8001e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	887a      	ldrh	r2, [r7, #2]
 8001e24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	887a      	ldrh	r2, [r7, #2]
 8001e36:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4e:	2b40      	cmp	r3, #64	; 0x40
 8001e50:	d007      	beq.n	8001e62 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e6a:	d178      	bne.n	8001f5e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d002      	beq.n	8001e7a <HAL_SPI_TransmitReceive+0x10a>
 8001e74:	8b7b      	ldrh	r3, [r7, #26]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d166      	bne.n	8001f48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	1c9a      	adds	r2, r3, #2
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	3b01      	subs	r3, #1
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e9e:	e053      	b.n	8001f48 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d11b      	bne.n	8001ee6 <HAL_SPI_TransmitReceive+0x176>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d016      	beq.n	8001ee6 <HAL_SPI_TransmitReceive+0x176>
 8001eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d113      	bne.n	8001ee6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	881a      	ldrh	r2, [r3, #0]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	1c9a      	adds	r2, r3, #2
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	3b01      	subs	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d119      	bne.n	8001f28 <HAL_SPI_TransmitReceive+0x1b8>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d014      	beq.n	8001f28 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	b292      	uxth	r2, r2
 8001f0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	1c9a      	adds	r2, r3, #2
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001f24:	2301      	movs	r3, #1
 8001f26:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f28:	f7fe fefc 	bl	8000d24 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d807      	bhi.n	8001f48 <HAL_SPI_TransmitReceive+0x1d8>
 8001f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f3e:	d003      	beq.n	8001f48 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001f40:	2303      	movs	r3, #3
 8001f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001f46:	e0a7      	b.n	8002098 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1a6      	bne.n	8001ea0 <HAL_SPI_TransmitReceive+0x130>
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1a1      	bne.n	8001ea0 <HAL_SPI_TransmitReceive+0x130>
 8001f5c:	e07c      	b.n	8002058 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_SPI_TransmitReceive+0x1fc>
 8001f66:	8b7b      	ldrh	r3, [r7, #26]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d16b      	bne.n	8002044 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	330c      	adds	r3, #12
 8001f76:	7812      	ldrb	r2, [r2, #0]
 8001f78:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f92:	e057      	b.n	8002044 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d11c      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x26c>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d017      	beq.n	8001fdc <HAL_SPI_TransmitReceive+0x26c>
 8001fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d114      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	330c      	adds	r3, #12
 8001fbc:	7812      	ldrb	r2, [r2, #0]
 8001fbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d119      	bne.n	800201e <HAL_SPI_TransmitReceive+0x2ae>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d014      	beq.n	800201e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	1c5a      	adds	r2, r3, #1
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002010:	b29b      	uxth	r3, r3
 8002012:	3b01      	subs	r3, #1
 8002014:	b29a      	uxth	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800201a:	2301      	movs	r3, #1
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800201e:	f7fe fe81 	bl	8000d24 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800202a:	429a      	cmp	r2, r3
 800202c:	d803      	bhi.n	8002036 <HAL_SPI_TransmitReceive+0x2c6>
 800202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002034:	d102      	bne.n	800203c <HAL_SPI_TransmitReceive+0x2cc>
 8002036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002038:	2b00      	cmp	r3, #0
 800203a:	d103      	bne.n	8002044 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002042:	e029      	b.n	8002098 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1a2      	bne.n	8001f94 <HAL_SPI_TransmitReceive+0x224>
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d19d      	bne.n	8001f94 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800205c:	68f8      	ldr	r0, [r7, #12]
 800205e:	f000 f8b1 	bl	80021c4 <SPI_EndRxTxTransaction>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d006      	beq.n	8002076 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2220      	movs	r2, #32
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002074:	e010      	b.n	8002098 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	e000      	b.n	8002098 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002096:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3730      	adds	r7, #48	; 0x30
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80020c4:	f7fe fe2e 	bl	8000d24 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	4413      	add	r3, r2
 80020d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80020d4:	f7fe fe26 	bl	8000d24 <HAL_GetTick>
 80020d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80020da:	4b39      	ldr	r3, [pc, #228]	; (80021c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	015b      	lsls	r3, r3, #5
 80020e0:	0d1b      	lsrs	r3, r3, #20
 80020e2:	69fa      	ldr	r2, [r7, #28]
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80020ea:	e054      	b.n	8002196 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020f2:	d050      	beq.n	8002196 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80020f4:	f7fe fe16 	bl	8000d24 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	429a      	cmp	r2, r3
 8002102:	d902      	bls.n	800210a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d13d      	bne.n	8002186 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002118:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002122:	d111      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800212c:	d004      	beq.n	8002138 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002136:	d107      	bne.n	8002148 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002146:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002150:	d10f      	bne.n	8002172 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002170:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e017      	b.n	80021b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3b01      	subs	r3, #1
 8002194:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4013      	ands	r3, r2
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	bf0c      	ite	eq
 80021a6:	2301      	moveq	r3, #1
 80021a8:	2300      	movne	r3, #0
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d19b      	bne.n	80020ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3720      	adds	r7, #32
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000000 	.word	0x20000000

080021c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af02      	add	r7, sp, #8
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2200      	movs	r2, #0
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f7ff ff6a 	bl	80020b4 <SPI_WaitFlagStateUntilTimeout>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ea:	f043 0220 	orr.w	r2, r3, #32
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e000      	b.n	80021f8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e041      	b.n	8002296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe fc9c 	bl	8000b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f000 fa6a 	bl	8002718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d001      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e035      	b.n	8002324 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a16      	ldr	r2, [pc, #88]	; (8002330 <HAL_TIM_Base_Start_IT+0x90>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_TIM_Base_Start_IT+0x4e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d004      	beq.n	80022ee <HAL_TIM_Base_Start_IT+0x4e>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_TIM_Base_Start_IT+0x94>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d111      	bne.n	8002312 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2b06      	cmp	r3, #6
 80022fe:	d010      	beq.n	8002322 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002310:	e007      	b.n	8002322 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0201 	orr.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002322:	2300      	movs	r3, #0
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40012c00 	.word	0x40012c00
 8002334:	40000400 	.word	0x40000400

08002338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	d122      	bne.n	8002394 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b02      	cmp	r3, #2
 800235a:	d11b      	bne.n	8002394 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0202 	mvn.w	r2, #2
 8002364:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f9b1 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f9a4 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f9b3 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d122      	bne.n	80023e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d11b      	bne.n	80023e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0204 	mvn.w	r2, #4
 80023b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2202      	movs	r2, #2
 80023be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f987 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e005      	b.n	80023e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f97a 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f989 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b08      	cmp	r3, #8
 80023f4:	d122      	bne.n	800243c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0308 	and.w	r3, r3, #8
 8002400:	2b08      	cmp	r3, #8
 8002402:	d11b      	bne.n	800243c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0208 	mvn.w	r2, #8
 800240c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2204      	movs	r2, #4
 8002412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f000 f95d 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 8002428:	e005      	b.n	8002436 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 f950 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f000 f95f 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	2b10      	cmp	r3, #16
 8002448:	d122      	bne.n	8002490 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b10      	cmp	r3, #16
 8002456:	d11b      	bne.n	8002490 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0210 	mvn.w	r2, #16
 8002460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2208      	movs	r2, #8
 8002466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f933 	bl	80026e2 <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f926 	bl	80026d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 f935 	bl	80026f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	2b01      	cmp	r3, #1
 800249c:	d10e      	bne.n	80024bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d107      	bne.n	80024bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f06f 0201 	mvn.w	r2, #1
 80024b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe f9ec 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b80      	cmp	r3, #128	; 0x80
 80024c8:	d10e      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d107      	bne.n	80024e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80024e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fa67 	bl	80029b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d10e      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002500:	2b40      	cmp	r3, #64	; 0x40
 8002502:	d107      	bne.n	8002514 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800250c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f8f9 	bl	8002706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	f003 0320 	and.w	r3, r3, #32
 800251e:	2b20      	cmp	r3, #32
 8002520:	d10e      	bne.n	8002540 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b20      	cmp	r3, #32
 800252e:	d107      	bne.n	8002540 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f06f 0220 	mvn.w	r2, #32
 8002538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fa32 	bl	80029a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002540:	bf00      	nop
 8002542:	3708      	adds	r7, #8
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002558:	2b01      	cmp	r3, #1
 800255a:	d101      	bne.n	8002560 <HAL_TIM_ConfigClockSource+0x18>
 800255c:	2302      	movs	r3, #2
 800255e:	e0b3      	b.n	80026c8 <HAL_TIM_ConfigClockSource+0x180>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800257e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002586:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002598:	d03e      	beq.n	8002618 <HAL_TIM_ConfigClockSource+0xd0>
 800259a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800259e:	f200 8087 	bhi.w	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a6:	f000 8085 	beq.w	80026b4 <HAL_TIM_ConfigClockSource+0x16c>
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d87f      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025b0:	2b70      	cmp	r3, #112	; 0x70
 80025b2:	d01a      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0xa2>
 80025b4:	2b70      	cmp	r3, #112	; 0x70
 80025b6:	d87b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025b8:	2b60      	cmp	r3, #96	; 0x60
 80025ba:	d050      	beq.n	800265e <HAL_TIM_ConfigClockSource+0x116>
 80025bc:	2b60      	cmp	r3, #96	; 0x60
 80025be:	d877      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025c0:	2b50      	cmp	r3, #80	; 0x50
 80025c2:	d03c      	beq.n	800263e <HAL_TIM_ConfigClockSource+0xf6>
 80025c4:	2b50      	cmp	r3, #80	; 0x50
 80025c6:	d873      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d058      	beq.n	800267e <HAL_TIM_ConfigClockSource+0x136>
 80025cc:	2b40      	cmp	r3, #64	; 0x40
 80025ce:	d86f      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025d0:	2b30      	cmp	r3, #48	; 0x30
 80025d2:	d064      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x156>
 80025d4:	2b30      	cmp	r3, #48	; 0x30
 80025d6:	d86b      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025d8:	2b20      	cmp	r3, #32
 80025da:	d060      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x156>
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d867      	bhi.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d05c      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x156>
 80025e4:	2b10      	cmp	r3, #16
 80025e6:	d05a      	beq.n	800269e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80025e8:	e062      	b.n	80026b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6899      	ldr	r1, [r3, #8]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	f000 f95c 	bl	80028b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800260c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	609a      	str	r2, [r3, #8]
      break;
 8002616:	e04e      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f000 f945 	bl	80028b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800263a:	609a      	str	r2, [r3, #8]
      break;
 800263c:	e03b      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	461a      	mov	r2, r3
 800264c:	f000 f8bc 	bl	80027c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2150      	movs	r1, #80	; 0x50
 8002656:	4618      	mov	r0, r3
 8002658:	f000 f913 	bl	8002882 <TIM_ITRx_SetConfig>
      break;
 800265c:	e02b      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6818      	ldr	r0, [r3, #0]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6859      	ldr	r1, [r3, #4]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	461a      	mov	r2, r3
 800266c:	f000 f8da 	bl	8002824 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2160      	movs	r1, #96	; 0x60
 8002676:	4618      	mov	r0, r3
 8002678:	f000 f903 	bl	8002882 <TIM_ITRx_SetConfig>
      break;
 800267c:	e01b      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	6859      	ldr	r1, [r3, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	461a      	mov	r2, r3
 800268c:	f000 f89c 	bl	80027c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2140      	movs	r1, #64	; 0x40
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f8f3 	bl	8002882 <TIM_ITRx_SetConfig>
      break;
 800269c:	e00b      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4619      	mov	r1, r3
 80026a8:	4610      	mov	r0, r2
 80026aa:	f000 f8ea 	bl	8002882 <TIM_ITRx_SetConfig>
        break;
 80026ae:	e002      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026b0:	bf00      	nop
 80026b2:	e000      	b.n	80026b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80026b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr

080026e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bc80      	pop	{r7}
 8002704:	4770      	bx	lr

08002706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a25      	ldr	r2, [pc, #148]	; (80027c0 <TIM_Base_SetConfig+0xa8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d007      	beq.n	8002740 <TIM_Base_SetConfig+0x28>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d003      	beq.n	8002740 <TIM_Base_SetConfig+0x28>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	4a22      	ldr	r2, [pc, #136]	; (80027c4 <TIM_Base_SetConfig+0xac>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d108      	bne.n	8002752 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <TIM_Base_SetConfig+0xa8>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d007      	beq.n	800276a <TIM_Base_SetConfig+0x52>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002760:	d003      	beq.n	800276a <TIM_Base_SetConfig+0x52>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <TIM_Base_SetConfig+0xac>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d108      	bne.n	800277c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <TIM_Base_SetConfig+0xa8>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d103      	bne.n	80027b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	691a      	ldr	r2, [r3, #16]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	615a      	str	r2, [r3, #20]
}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bc80      	pop	{r7}
 80027be:	4770      	bx	lr
 80027c0:	40012c00 	.word	0x40012c00
 80027c4:	40000400 	.word	0x40000400

080027c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	f023 0201 	bic.w	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	693a      	ldr	r2, [r7, #16]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f023 030a 	bic.w	r3, r3, #10
 8002804:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	621a      	str	r2, [r3, #32]
}
 800281a:	bf00      	nop
 800281c:	371c      	adds	r7, #28
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr

08002824 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	f023 0210 	bic.w	r2, r3, #16
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800284e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	031b      	lsls	r3, r3, #12
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002860:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	621a      	str	r2, [r3, #32]
}
 8002878:	bf00      	nop
 800287a:	371c      	adds	r7, #28
 800287c:	46bd      	mov	sp, r7
 800287e:	bc80      	pop	{r7}
 8002880:	4770      	bx	lr

08002882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4313      	orrs	r3, r2
 80028a0:	f043 0307 	orr.w	r3, r3, #7
 80028a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr

080028b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b087      	sub	sp, #28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	60f8      	str	r0, [r7, #12]
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	607a      	str	r2, [r7, #4]
 80028c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	021a      	lsls	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	431a      	orrs	r2, r3
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	4313      	orrs	r3, r2
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	609a      	str	r2, [r3, #8]
}
 80028ea:	bf00      	nop
 80028ec:	371c      	adds	r7, #28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002908:	2302      	movs	r3, #2
 800290a:	e041      	b.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a14      	ldr	r2, [pc, #80]	; (800299c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d009      	beq.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002958:	d004      	beq.n	8002964 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a10      	ldr	r2, [pc, #64]	; (80029a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d10c      	bne.n	800297e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800296a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	4313      	orrs	r3, r2
 8002974:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40012c00 	.word	0x40012c00
 80029a0:	40000400 	.word	0x40000400

080029a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bc80      	pop	{r7}
 80029b4:	4770      	bx	lr

080029b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr

080029c8 <__libc_init_array>:
 80029c8:	b570      	push	{r4, r5, r6, lr}
 80029ca:	2600      	movs	r6, #0
 80029cc:	4d0c      	ldr	r5, [pc, #48]	; (8002a00 <__libc_init_array+0x38>)
 80029ce:	4c0d      	ldr	r4, [pc, #52]	; (8002a04 <__libc_init_array+0x3c>)
 80029d0:	1b64      	subs	r4, r4, r5
 80029d2:	10a4      	asrs	r4, r4, #2
 80029d4:	42a6      	cmp	r6, r4
 80029d6:	d109      	bne.n	80029ec <__libc_init_array+0x24>
 80029d8:	f000 f822 	bl	8002a20 <_init>
 80029dc:	2600      	movs	r6, #0
 80029de:	4d0a      	ldr	r5, [pc, #40]	; (8002a08 <__libc_init_array+0x40>)
 80029e0:	4c0a      	ldr	r4, [pc, #40]	; (8002a0c <__libc_init_array+0x44>)
 80029e2:	1b64      	subs	r4, r4, r5
 80029e4:	10a4      	asrs	r4, r4, #2
 80029e6:	42a6      	cmp	r6, r4
 80029e8:	d105      	bne.n	80029f6 <__libc_init_array+0x2e>
 80029ea:	bd70      	pop	{r4, r5, r6, pc}
 80029ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80029f0:	4798      	blx	r3
 80029f2:	3601      	adds	r6, #1
 80029f4:	e7ee      	b.n	80029d4 <__libc_init_array+0xc>
 80029f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80029fa:	4798      	blx	r3
 80029fc:	3601      	adds	r6, #1
 80029fe:	e7f2      	b.n	80029e6 <__libc_init_array+0x1e>
 8002a00:	08002a58 	.word	0x08002a58
 8002a04:	08002a58 	.word	0x08002a58
 8002a08:	08002a58 	.word	0x08002a58
 8002a0c:	08002a5c 	.word	0x08002a5c

08002a10 <memset>:
 8002a10:	4603      	mov	r3, r0
 8002a12:	4402      	add	r2, r0
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d100      	bne.n	8002a1a <memset+0xa>
 8002a18:	4770      	bx	lr
 8002a1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002a1e:	e7f9      	b.n	8002a14 <memset+0x4>

08002a20 <_init>:
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a22:	bf00      	nop
 8002a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a26:	bc08      	pop	{r3}
 8002a28:	469e      	mov	lr, r3
 8002a2a:	4770      	bx	lr

08002a2c <_fini>:
 8002a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a2e:	bf00      	nop
 8002a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a32:	bc08      	pop	{r3}
 8002a34:	469e      	mov	lr, r3
 8002a36:	4770      	bx	lr
